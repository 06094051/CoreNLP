<!--#include virtual="/header.html" -->

<center>
<h1><font color="#a40526">Stanford Dependencies</font></h1>
</center>

<center><p><font color="#a40526"><a href="#About">About</a> | 
<a href="#Download">Download</a> |
<a href="#Methods">Other parsers</a> |
<a href="#Mail">Mailing lists</a> |
<a href="#GUI">GUI</a>
</font></p></center>

<h3><a name="About">About</a></h3>

<p>
The Stanford dependencies provide a representation of grammatical
relations between words in a sentence. They have been designed to be
easily understood and effectively used by people who want to extract
textual relations. Stanford dependencies (SD) are triplets: name of the relation, governor and dependent. The standard dependencies for the sentence <i>Bills on ports and immigration were submitted by Senator Brownback, Republican of Kansas</i> are given below, as well as two graphical representations: the standard dependencies (collapsed and propagated) and the basic dependency representation in which each word in the sentence (except the head of the sentence) is the dependent of one other word (no collapsing, no propagation).</p>

<center>
<table border="0" cellspacing="10">
	<tr>
		<th valign="top">Dependencies for <em>Bills on ports and immigration were submitted by Senator Brownback, Republican of Kansas</em></th>
		<th align="center" valign="top">
		Figure 1. Standard Stanford dependencies (collapsed and propagated) </th>
		<th align="center" valign="top">
		Figure 2. Basic dependencies </th>
	</tr>
	<tr valign="top">
		<td><blockquote>
			<br>
		nsubjpass(submitted, Bills)<br>
		auxpass(submitted, were)<br>
		agent(submitted, Brownback)<br>
		nn(Brownback, Senator)<br>
		appos(Brownback, Republican)<br>
		prep_of(Republican, Kansas)<br>
		prep_on(Bills, ports)<br>
		conj_and(ports, immigration)<br>
		prep_on(Bills, immigration)
		</blockquote>
		</td>
		<td align="center" valign="top">
			<img src="http://nlp.stanford.edu/software/stanford-dependencies/brownback_ccprocessed.png" width="410"> </td>
		<td align="center" valign="top">
			<img src="http://nlp.stanford.edu/software/stanford-dependencies/brownback-uncollapsed.png" width="380"> </td>
	</tr>
</table>
</center>
</p>

The English version of the Stanford dependencies has been developed by
Marie-Catherine de Marneffe, Bill MacCartney, and Christopher Manning. All details about the English dependencies can be found in the manual:
<blockquote>
Marie-Catherine de Marneffe and Christopher D. Manning. 2008. <a href="dependencies_manual.pdf">Stanford Dependencies manual</a>. 
</blockquote>
The <a href="dependencies_manual.pdf">manual</a> contains a description of all the existing English grammatical relations in the representation. It explains the differences between the five types of representation available, and how such types of representation can be obtained. It also gives references to further discussion and use of the Stanford dependencies.</p>

The dependencies are produced using hand-written  
<a href="tregex.shtml"><code>tregex</code></a> patterns over phrase-structure trees as described in:</p>
<blockquote>
Marie-Catherine de Marneffe, Bill MacCartney and Christopher
D. Manning. 2006. 
<a href="http://nlp.stanford.edu/pubs/LREC06_dependencies.pdf">Generating
Typed Dependency Parses from Phrase Structure Parses</a>.  In <i>LREC 2006</i>.
</blockquote>
The main ideas motivating the Stanford dependency representation appear in this paper:</p>
<blockquote>
Marie-Catherine de Marneffe and Christopher D. Manning. 2008. 
<a href="http://nlp.stanford.edu/pubs/dependencies-coling08.pdf">The
Stanford typed dependencies representation</a>. In <i>COLING 2008 Workshop on
Cross-framework and Cross-domain Parser Evaluation</i>.
</blockquote>
</p>

<p>
The definition of the set of dependencies has evolved a little over the
years, and the particular patterns used to convert phrase structure trees
to dependencies have been improved quite a bit.  Hence, if you are
publishing a paper using Stanford Dependencies, we really appreciate it
if you could indicate precisely which version you are using. This is
easily done by citing the version of the Stanford Parser code used.
</p>

<p>
In practice, the dependencies can be obtained using our software in two ways. Either by using the <a href="http://nlp.stanford.edu/software/lex-parser.shtml">Stanford parser</a> with the <code>-outputFormat typedDependencies</code> option on raw text, or directly on phrase-structure trees using the <code>EnglishGrammaticalStructure</code> class available in the parser package. For English, five different variants of the dependencies are available, and different options can be used to get these. The default representation is the "CCprocessed" one, which collapses and propagates dependencies (as shown in Figure 1, in contrast to Figure 2 where the dependencies are not collapsed nor propagated).  For more details, refer to section 5 of the <a href="dependencies_manual.pdf">Stanford Dependencies manual</a>.
</p>

<p>
Here are some examples of Stanford Dependencies representations of
sentences, originating from the 
<a href="http://lingo.stanford.edu/events/08/pe/">Coling 2008 Workshop on
Cross-Framework and Cross-Domain Parser Evaluation</a>: 
<a href="stanford-dependencies/required-wsj02.Stanford">required-wsj02.Stanford</a>, 
<a href="stanford-dependencies/optional-wsj02.Stanford">optional-wsj02.Stanford</a>, 
<a href="stanford-dependencies/genia.stanford">genia.stanford</a>.
Only the required WSJ set were hand-verified; the representations in the
other two sets were automatically generated.


<p>
The Stanford dependencies are also available for <b>Chinese</b>. The Chinese dependencies have been developed by Huihsin Tseng and Pi-Chuan Chang. A brief description of the Chinese grammatical relations can be found in <a href="http://nlp.stanford.edu/pubs/ssst09-chang.pdf">this paper</a>.
</p>


<BR>
<h3><a name="Download">Download</a></h3>

<p>
The dependency code is part of the Stanford parser. Go <a href="http://nlp.stanford.edu/software/lex-parser.shtml#Download">here</a> to download a version.
</p>


<BR>
<h3><a name="Methods">Other parsers</a></h3>

<p>
While the original and canonical approach to generating the Stanford
Dependencies is using the Stanford parser, there are now many other
parsers which produce them, which may offer better speed or precision. 
Any phrase structure parser that constructs PTB style trees can be used,
in addition to any trainable dependency parser. When using an
alternative phrase structure parser, the Stanford Parser
class <code>EnglishGrammaticalStructure</code> is used to extract
dependencies from the resulting constituent parse trees. Trainable
dependency parsers can produce the <em>basic</em> Stanford Dependency
representation. This is a projective variant of the Stanford
Dependencies that can be transformed into the default representation,
CCprocessed, using <code>EnglishGrammaticalStructure</code>. 
</p>
<p> 
The table below summarizes some methods for generating the Stanford
Dependencies along with the speed and accuracy of each approach on
section 22 of the Penn TreeBank. Links are provided to the corresponding
software packages and trained parsing models (some of the dependency
models were trained by us). All the accuracies and timings here are for
SDs corresponding to Stanford Parser version 1.6.2.  The tree or basic
dependency output is in each case converted to CCprocessed dependencies
using our <code>EnglishGrammaticalStructure</code> class, and then
<b>evaluation is on CCprocessed dependencies</b>.  (I.e., you cannot
directly compare 
these numbers with results on recovering Stanford basic dependencies,
which is an easier task.)
</p>

<p>
<table border="1">
<tr><th colspan="3">Approach</th><th>Labeled Attachment (F1)</th><th>Time (mm:ss)</th><th>Links</th></tr>
<tr><td rowspan="7">Constituent</td></tr>
<tr><td rowspan="3">Charniak-Johnson</td><td>default (T210)</td><td>89.1</td><td>11:18</td><td rowspan="3"><a href="ftp://ftp.cs.brown.edu/pub/nlparser/reranking-parserAug06.tar.gz">[Software]</a></tr>
<tr><td>T50</td><td>86.7</td><td>&nbsp;&nbsp;3:32</td></tr>
<tr><td>T10</td><td>75.7</td><td>&nbsp;&nbsp;2:17</td></tr>
<tr><td colspan="2">Berkeley Parser</td><td>87.9</td><td>10:14</td><td><a href="http://code.google.com/p/berkeleyparser/">[Software]</a><a href="http://berkeleyparser.googlecode.com/files/eng_sm5.gr">[Model]</a></tr>
<tr><td colspan="2">Bikel</td><td>85.3</td><td>29:57</td><td><a href="http://www.cis.upenn.edu/~dbikel/software.html#stat-parser">[Software]</a><a href="http://www.cis.upenn.edu/~dbikel/download/dbparser/wsj-02-21.observed.gz">[Model Data]</a></tr>
<tr><td colspan="2">Stanford (englishPCFG)</td><td>84.2</td><td>11:05</td><td><a href="http://nlp.stanford.edu/software/lex-parser.shtml">[Software]</a></td></tr>
<tr><td rowspan="7">Dependency</td></tr>
<tr><td colspan="2">Ensemble Malt</td><td>82.4</td><td>&nbsp;&nbsp;1:56 </td><td><a href="http://www.surdeanu.name/mihai/ensemble/index.php">[Software]</a><a href="http://www.surdeanu.name/mihai/ensemble/models.tar.gz">[Model]</a> [<a href="http://www-nlp.stanford.edu/pubs/naacl10-parsing-surdeanu.pdf">Paper</a>]</tr>
<tr><td rowspan="2">MaltParser</td><td>Nivre Eager, SVM poly
deg:2</td><td>81.1</td><td>&nbsp;&nbsp;3:23</td><td><a
href="http://maltparser.org/">[Software]</a><a
href="http://nlp.stanford.edu/software/stanford-dependencies/nivre_eager_simkernel.mco">[Model we built/used]</a> <a href="http://maltparser.org/mco/english_parser/engmalt.poly.mco">[English MaltParser model]</a> <a href="http://maltparser.org/mco/english_parser/engmalt.html">[English MaltParser]</a></tr>
<tr><td>Nivre Eager, LibLinear</td><td>76.2</td><td>&nbsp;&nbsp;0:16</td><td><a href="http://maltparser.org/">[Software]</a><a href="http://nlp.stanford.edu/software/stanford-dependencies/nivre_eager.mco">[Model we built/used]</a> <a href="http://maltparser.org/mco/english_parser/engmalt.linear.mco">[English MaltParser model]</a> <a href="http://maltparser.org/mco/english_parser/engmalt.html">[English MaltParser]</a></tr>
<tr><td colspan="2">MSTParser (Eisner) </td><td>78.8</td><td>&nbsp;&nbsp;6:01</td><td><a href="http://maltparser.org/">[Software]</a><a href="http://nlp.stanford.edu/software/stanford-dependencies/mst-eisner.mod.gz">[Model]</a></tr>
<tr><td colspan="2">RelEx</td><td>48.1</td><td>31:38</td><td><a href="http://opencog.org/wiki/RelEx">[Software]</a></tr>
<tr><td colspan="2">Easy-First Parser</td><td></td><td></td><td><a href="http://www.cs.bgu.ac.il/~yoavg/software/sdparser/">[Software]</a></tr>
</table>
</p>

<p>
The Charniak-Johnson parser includes a model for parsing English. The Bikel parser requires users to train their own model, which can be done using the included <code>train-from-observed</code> utility and the model data linked above. The RelEx package is rule-based and provides a Stanford Dependency compatibility mode.
</p>

<p>
For the dependency parsers, part-of-speech (POS) tags were generated using the <a href="http://nlp.stanford.edu/software/tagger.shtml">Stanford POS tagger</a> and the included left3words-wsj-0-18 model. Times represent the total time required to produce the dependencies including: POS tagging (if applicable), parsing, and extraction of the CCprocessed Stanford Dependency representation. Benchmarking was done on a dual CPU Intel Xeon E5520. Multithreading was disabled for the Charniak-Johnson parser, in order to obtain a per CPU-core estimate of parsing speed. 
</p>

<p>
In general, all parsers were run in their default out-of-the-box
configurations.  But, in addition, for the Charniak-Johnson parser, the table above also shows the speed and accuracy trade-offs from varying the amount of search by setting different T values (by default T = 210).  The Charniak-Johnson parser allows
users to trade off parsing accuracy for speed by adjusting how liberal
the system is about expanding edges after the best-first-search has
found one complete parse of the sentence: they constrain themselves to
only examine T<i>val</i>/10 times more edges in search of a better
parse. 
</p>

<p>
For more information about these parsing accuracy vs. speed trade-offs when generating Stanford Dependencies, see: 
<blockquote>
<a href="http://www.dmcer.net/">Daniel Cer</a>,
<a href="http://www.stanford.edu/~mcdm/">Marie-Catherine de Marneffe</a>,
<a href="http://www.stanford.edu/~jurafsky/">Daniel Jurafsky</a>,
and <a href="http://nlp.stanford.edu/~manning/">Christopher D. Manning</a>.
2010.
Parsing to Stanford Dependencies: Trade-offs between speed and accuracy.
In <i><a href="http://www.lrec-conf.org/lrec2010/"
>7th International Conference on Language Resources and Evaluation</a>
(<a href="http://www.lrec-conf.org/lrec2010/">LREC 2010</a>)</i>.
[<a href="/pubs/lrecstanforddeps_final_final.pdf">pdf</a>,

<a href="/pubs/lrecstanforddeps_final_final.bib">bib</a>]
</blockquote>



<BR>
<h3><a name="Mail">Mailing lists</a></h3>
<p>
To ask questions about the dependencies, you can use the same lists as for the parser, each <code>@lists.stanford.edu</code>:
</p>
<ol>
<li><code>parser-user</code> This is the best list to post to in order
to ask questions, make announcements, or for discussion among parser
users.  Join the list via <a href="https://mailman.stanford.edu/mailman/listinfo/parser-user">this webpage</a> or by emailing
<code>parser-user-join@lists.stanford.edu</code>.   (Leave the
subject and message body empty.)  You can also 
<a href="https://mailman.stanford.edu/pipermail/parser-user/">look at
the list archives</a>.
<li><code>parser-announce</code> This list will be used only to announce
new parser versions.  So it will be very low volume (expect 1-3
message a year).  Join the list via <a href="https://mailman.stanford.edu/mailman/listinfo/parser-announce">this webpage</a> or by emailing
<code>parser-announce-join@lists.stanford.edu</code>.  (Leave the
subject and message body empty.)
<li><code>parser-support</code> This list goes only to the parser
maintainers.  It's a good address for licensing questions, etc.  <b>For
general use and support questions, you're better off joining and using
<code>parser-user</code>.</b>
You cannot join <code>parser-support</code>, but you can mail questions to 
<code>parser-support@lists.stanford.edu</code>. 
</ol>

<BR>
<h3><a name="GUI">GUI</a></h3>

<p>
Bernard Bou developed a GUI focusing on the typed dependencies, including an editor: <br>
<blockquote>
<a href="http://grammarscope.sourceforge.net/">GrammarScope: Stanford parser
grammatical relation browser</a>
</blockquote>
</p>

<p>We now have a nice visualization of Stanford Dependencies in our
<a href="http://nlp.stanford.edu:8080/corenlp/">online Stanford CoreNLP demo</a>,
provided by <a href="http://brat.nlplab.org">brat</a>.

<!--#include virtual="/footer.html" -->

