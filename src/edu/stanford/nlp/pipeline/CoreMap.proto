package edu.stanford.nlp.pipeline;

option java_package = "edu.stanford.nlp.pipeline";
option java_outer_classname = "CoreMapProtos";

message Document {
  required string     text        = 1;
  repeated CoreLabel  tokens      = 2;
  repeated Sentence   sentences   = 3;
  repeated CorefChain corefChains = 4;
  optional string     docID       = 5;
}

//
// The serialized version of a CoreMap representing a sentence.
//
message Sentence {
  required uint32          tokenOffsetBegin                    = 1;
  required uint32          tokenOffsetEnd                      = 2;
  optional uint32          sentenceIndex                       = 3;
  optional uint32          characterOffsetBegin                = 4;
  optional uint32          characterOffsetEnd                  = 5;
  optional ParseTree       parseTree                           = 6;
  optional DependencyGraph basicDependencies                   = 7;
  optional DependencyGraph collapsedDependencies               = 8;
  optional DependencyGraph collapsedCCProcessedDependencies    = 9;
}

//
// The serialized version of a CoreLabel (a single word).
//
message CoreLabel {
  required string word            = 1;
  optional string pos             = 2;
  optional string value           = 3;
  optional string category        = 4;
  optional string before          = 6;
  optional string after           = 7;
  optional string originalText    = 8;
  optional string ner             = 10;
  optional string lemma           = 11;
  optional uint32 index           = 12;
  optional uint32 beginPosition   = 14;
  optional uint32 endPosition     = 15;
  // Fields in the CoreLabel java class that are moved elsewhere
  //       uint32 sentenceIndex  @see Sentence#sentenceIndex
  //       string docID          @see Document#docID
}

//
// A syntactic parse tree, with scores.
//
message ParseTree {
  repeated ParseTree children        = 1;
  optional string    value           = 2;
  optional uint32    yieldBeginIndex = 3;
  optional uint32    yieldEndIndex   = 4;
  optional double    score           = 5;
}

//
// A dependency graph representation.
//
message DependencyGraph {
  message Node {
    required uint32 sentenceIndex  = 1;
    required uint32 index          = 2;
    optional bool   copyAnnotation = 3;
  }

  message Edge {
    required uint32 source  = 1;
    required uint32 target  = 2;
    optional string dep     = 3;
    optional bool   isExtra = 4;
  }
  
  repeated Node   nodes = 1;
  repeated Edge   edges = 2;
  repeated uint32 roots = 3;
}

//
// A coreference chain.
//
message CorefChain {
  message CorefMention {
    optional int32  mentionID   = 1;
    optional string mentionType = 2;
    optional string number      = 3;
    optional string gender      = 4;
    optional string animacy     = 5;
    optional uint32 startIndex  = 6;
    optional uint32 endIndex    = 7;
    optional uint32 headIndex   = 9;
  }

  optional int32        chainID        = 1;
  repeated CorefMention mentions       = 2;
  optional uint32       representative = 3;
}
