<!--#include virtual="/header.html" -->

<center>
<h2>Stanford CoreNLP FAQ</h2>
</center>

<h3>Questions</h3>

<ol>
<li><a href="#encoding">What encoding does Stanford CoreNLP use?</a></li>
<li><a href="#custom">Can you say more about adding a custom annotator?</a></li>
<li><a href="#memory">CoreNLP runs out of memory?</a></li>
</ol>


<hr>

<h3>Questions with answers</h3>

<ol>
<li><h4><a name="encoding">What encoding does Stanford CoreNLP use?</a></h4>
<p>
By default, it uses UTF-8.  You can change the encoding used when
reading files by setting the encoding property or by supplying the
command line flag -encoding FOO.
</p>
</li>

<li><h4><a name="custom">Can you say more about adding a custom annotator?</a></h4>
<p>
Here are the steps:

<ul>
<li>
extend the class edu.stanford.nlp.pipeline.Annotator
<br>

I assume you're writing your own code to do the processing.  Whatever
code you write, you want to call it from a class that is a subclass of
Annotator.  Look at any of the existing Annotator classes, such as
POSTaggerAnnotator, and try to emulate what it does.
</li>
<li>
Have a constructor with the signature (String, Properties)
<br>

If your new annotator is FilterAnnotator, for example, it must have a
constructor FilterAnnotator(String name, Properties props) in order to
work.
</li>

<li>
Add the property <code>customAnnotatorClass.FOO=BAR</code>
<br>

Using the same example, suppose your full class name is
com.foo.FilterAnnotator, and you want the new annotator to have the
name "filter".  When creating the CoreNLP properties, you need to add
the flag
<br>
<code>customAnnotatorClass.filter=com.foo.FilterAnnotator </code>
<br>

You can then add "filter" to the list of annotators in the annotators
property.  When you do that, the constructor FilterAnnotator(String,
Properties) will be called with the name "filter" and the properties
files you run CoreNLP with.  This lets you define any property flag
you want.  For example, you could name a flag filter.verbose and then
extract that flag from the properties to determine the verbosity of
your new annotator.
</li>
</ul>
</li>

<li><h4><a name="memory">CoreNLP runs out of memory?</a></h4>

<p>
Either add more memory, use less annotators, or give CoreNLP smaller documents.  Nearly all our
annotators load large model files which use lots of memory.  Running the
full CoreNLP pipeline requires the sum of all these memory
requirements.  Additionally, the coreference module operates over an
entire document.  As the document size increases, its processing time
and space increase without bound.
</p>
</li>

</ol>


<!--#include virtual="/footer.html" -->



