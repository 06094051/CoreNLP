package edu.stanford.nlp.ie.ui;


import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import java.awt.*;

/**
 * Panel containing the slot (JLabel), current value (JLabel), extracted value (JTextField), and whether to overwrite
 * the current value (JCheckBox), if one exists.  Used by ConfirmExtractedFieldsDialog
 *
 * @author  Huy Nguyen
 */
public class ExtractedFieldPanel extends javax.swing.JPanel {
  /**
   * 
   */
  private static final long serialVersionUID = -3975519354439436733L;
  private FontMetrics fm; // font metrics for the JLabels in this panel
  private int preferredExtractedWidth;
  private static final int MIN_EXTRACTED_WIDTH = 100; // so always spaced

  /**
   * Creates new form extractedValueFieldPanel
   */
  public ExtractedFieldPanel(String slotName) {
    initComponents();
    slotLabel.setText(slotName);
    fm = slotLabel.getFontMetrics(slotLabel.getFont());
    preferredExtractedWidth = extractedValueField.getPreferredSize().width;
    if (preferredExtractedWidth < MIN_EXTRACTED_WIDTH) {
      preferredExtractedWidth = MIN_EXTRACTED_WIDTH;
    }
  }

  /**
   * Gets the name of the slot for this panel
   */
  public String getSlot() {
    return slotLabel.getText();
  }

  /**
   * Gets the current value for the slot
   */
  public String getCurrentValue() {
    return currentValueLabel.getText();
  }

  /**
   * Sets the current value for the slot
   */
  public void setCurrentValue(String currentValue) {
    currentValueLabel.setText(currentValue);
    currentValueLabel.setToolTipText(currentValue);
    setOverwriteEnabled();
  }

  /**
   * Gets the extracted value for the slot
   */
  public String getExtractedValue() {
    return extractedValueField.getText();
  }

  /**
   * Sets the extracted value for the slot
   */
  public void setExtractedValue(String extractedValue) {
    extractedValueField.setText(extractedValue);
    extractedValueField.setCaretPosition(0);
    setOverwriteEnabled();
  }

  /**
   * Whether the overwrite box is checked or not.  Default is true
   */
  public boolean getOverwrite() {
    return overwriteBox.isSelected();
  }

  /**
   * (De)selects the overwrite box
   */
  public void setOverwrite(boolean overwrite) {
    overwriteBox.setSelected(overwrite);
  }

  /**
   * Whether the overwrite box is visible or not
   */
  public boolean getOverwriteEnabled() {
    return overwriteBox.isEnabled();
  }

  /**
   * Sets whether the overwrite box is visible or not
   */
  public void setOverwriteEnabled(boolean enable) {
    overwriteBox.setEnabled(enable);
  }

  /**
   * Enables the overwrite button if the currentValue is null, empty, or
   * different from the extractedValue
   */
  private void setOverwriteEnabled() {
    String currentValue = currentValueLabel.getText();
    String extractedValue = extractedValueField.getText();
    setOverwriteEnabled(!possiblyNullStringEquals(currentValue, extractedValue) && currentValue != null && currentValue.length() > 0);
  }

  /* compares two strings for equality, and return true if 1) both s1 and s2 are null
  * 2) either s1 and s2 are null, and the other is empty, or 3) s1.equals(s2)
  * returns false otherwise
  */
  public static boolean possiblyNullStringEquals(String s1, String s2) {
    if (s1 == null) {
      if (s2 == null || s2.length() == 0) {
        return true;
      } else {
        return false;
      }
    } else if (s2 == null) {
      if (s1 == null || s1.length() == 0) {
        return true;
      } else {
        return false;
      }
    } else if (s1.equals(s2)) {
      return true;
    } else {
      return false;
    }
  }

  /**
   * Returns the maximum preferred with of the element in the specified column
   */
  public int getPreferredWidth(int column) {
    switch (column) {
      case 0:
        return (slotLabel.getText() != null ? fm.stringWidth(slotLabel.getText()) : 0);
      case 1:
        return (currentValueLabel.getText() != null ? fm.stringWidth(currentValueLabel.getText()) : 0);
      case 2:
        return preferredExtractedWidth;
      default:
        return -1;
    }
  }

  /**
   * Sets the preferred width of the label displaying the property key.
   */
  public void setPreferredWidth(int column, int width) {
    switch (column) {
      case 0:
        slotLabel.setPreferredSize(new Dimension(width, slotLabel.getPreferredSize().height));
        break;
      case 1:
        currentValueLabel.setPreferredSize(new Dimension(width, currentValueLabel.getPreferredSize().height));
        break;
      case 2:
        extractedValueField.setPreferredSize(new Dimension(width, extractedValueField.getPreferredSize().height));
    }
  }

  /**
   * This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  private void initComponents()//GEN-BEGIN:initComponents
  {
    contentPanel = new javax.swing.JPanel();
    slotLabel = new javax.swing.JLabel();
    currentValueLabel = new javax.swing.JLabel();
    extractedValueField = new javax.swing.JTextField();
    contentPanel.add(Box.createHorizontalGlue());
    overwriteBox = new javax.swing.JCheckBox();
    contentPanel.add(Box.createHorizontalGlue());

    setLayout(new java.awt.BorderLayout());

    contentPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

    slotLabel.setText("slotLabel");
    contentPanel.add(slotLabel);

    currentValueLabel.setText("currentValueLabel");
    contentPanel.add(currentValueLabel);

    extractedValueField.setMaximumSize(new java.awt.Dimension(2147483647, 20));
    extractedValueField.setMinimumSize(new java.awt.Dimension(20, 20));
    extractedValueField.setPreferredSize(new java.awt.Dimension(200, 20));
    extractedValueField.getDocument().addDocumentListener(new DocumentListener() {
      public void changedUpdate(DocumentEvent e) {
        setOverwriteEnabled();
      }

      public void insertUpdate(DocumentEvent e) {
        setOverwriteEnabled();
      }

      public void removeUpdate(DocumentEvent e) {
        setOverwriteEnabled();
      }
    });
    contentPanel.add(extractedValueField);

    overwriteBox.setSelected(true);
    contentPanel.add(overwriteBox);

    add(contentPanel, java.awt.BorderLayout.CENTER);

  }//GEN-END:initComponents


  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JLabel slotLabel;
  private javax.swing.JTextField extractedValueField;
  private javax.swing.JLabel currentValueLabel;
  private javax.swing.JCheckBox overwriteBox;
  private javax.swing.JPanel contentPanel;
  // End of variables declaration//GEN-END:variables

}
