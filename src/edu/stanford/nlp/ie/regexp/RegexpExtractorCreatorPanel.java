/*
 * RegexpExtractorCreatorPanel.java
 *
 * Created on October 2, 2003, 12:05 AM
 */

package edu.stanford.nlp.ie.regexp;

import javax.swing.*;
import javax.swing.text.Document;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import java.awt.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * @author Huy Nguyen
 */
public class RegexpExtractorCreatorPanel extends javax.swing.JPanel {


  private static final long serialVersionUID = 1L;
  
  private SimpleAttributeSet highlightStyle;
  private SimpleAttributeSet normalStyle;

  /**
   * Creates new form RegexpExtractorCreatorPanel
   */
  public RegexpExtractorCreatorPanel() {
    initComponents();
    createHighlighters();
  }

  /**
   * Returns the regular expression entered in the text field.
   */
  public String getRegexp() {
    return (regexpField.getText());
  }

  /**
   * Creates the SimpleAttributeSets for highlighting text
   */
  private void createHighlighters() {
    // for (un)highlighting text
    highlightStyle = new SimpleAttributeSet();
    normalStyle = new SimpleAttributeSet();
    StyleConstants.setBackground(highlightStyle, Color.yellow);
  }


  /**
   * Clears the highlights from text
   */
  public void clearHighlight() {
    highlightText(0, testPane.getText().length() - 1, normalStyle);
  }

  /**
   * Highlights all substrings matching the regular expression in regexpField
   * in the sample text.
   */
  public void highlightMatches() {
    String regexp = regexpField.getText();
    if (regexp.length() == 0) {
      JOptionPane.showMessageDialog(this, "Empty regular expression", "Error", JOptionPane.ERROR_MESSAGE);
    }
    Pattern pattern = null;
    try {
      pattern = Pattern.compile(regexp);
    } catch (java.util.regex.PatternSyntaxException e) {
      JOptionPane.showMessageDialog(this, "Error in regexp syntax: " + e.getMessage(), "Syntax Error", JOptionPane.ERROR_MESSAGE);
      return;
    }
    Document doc = testPane.getDocument();
    String docText = "";
    try {
      docText = doc.getText(0, doc.getLength());
    } catch (Exception e) {
      e.printStackTrace();
    }

    Matcher matcher = pattern.matcher(docText);
    boolean found = false;
    while (matcher.find()) {
      highlightText(matcher.start(), matcher.end(), highlightStyle);
      found = true;
    }
    if (!found) {
      JOptionPane.showMessageDialog(this, "No matches found");
    }
  }

  /**
   * highlights specified text region by changing the character attributes
   */
  private void highlightText(int start, int end, SimpleAttributeSet style) {
    if (end > start) {
      testPane.getStyledDocument().setCharacterAttributes(start, end - start, style, false);
    }
  }

  /**
   * This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  private void initComponents()//GEN-BEGIN:initComponents
  {
    jPanel1 = new javax.swing.JPanel();
    jLabel1 = new javax.swing.JLabel();
    regexpField = new javax.swing.JTextField();
    testButton = new javax.swing.JButton();
    jScrollPane1 = new javax.swing.JScrollPane();
    testPane = new javax.swing.JTextPane();

    setLayout(new java.awt.BorderLayout());

    jPanel1.setLayout(new java.awt.BorderLayout(3, 0));

    jPanel1.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(1, 5, 1, 5)));
    jLabel1.setText("regexp:");
    jLabel1.setToolTipText("Regular expression to match extracted text - if regexp contains capture groups, only $1 is is extracted");
    jPanel1.add(jLabel1, java.awt.BorderLayout.WEST);

    regexpField.setToolTipText("Regular expression to match extracted text - if regexp contains capture groups, only $1 is is extracted");
    regexpField.setPreferredSize(new java.awt.Dimension(250, 20));
    regexpField.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        regexpFieldActionPerformed(evt);
      }
    });

    jPanel1.add(regexpField, java.awt.BorderLayout.CENTER);

    testButton.setText("Test");
    testButton.setToolTipText("Tests the regular expression against the sample text");
    testButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        testButtonActionPerformed(evt);
      }
    });

    jPanel1.add(testButton, java.awt.BorderLayout.EAST);

    add(jPanel1, java.awt.BorderLayout.NORTH);

    testPane.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(1, 1, 1, 1)));
    testPane.setText("Insert text to test your regular expression.");
    testPane.setPreferredSize(new java.awt.Dimension(400, 200));
    jScrollPane1.setViewportView(testPane);

    add(jScrollPane1, java.awt.BorderLayout.CENTER);

  }//GEN-END:initComponents

  private void regexpFieldActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_regexpFieldActionPerformed
  {//GEN-HEADEREND:event_regexpFieldActionPerformed
    highlightMatches();
  }//GEN-LAST:event_regexpFieldActionPerformed

  private void testButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_testButtonActionPerformed
  {//GEN-HEADEREND:event_testButtonActionPerformed
    highlightMatches();
  }//GEN-LAST:event_testButtonActionPerformed


  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JTextPane testPane;
  private javax.swing.JTextField regexpField;
  private javax.swing.JButton testButton;
  private javax.swing.JPanel jPanel1;
  // End of variables declaration//GEN-END:variables

  // for internal debugging purposes only
  public static void main(String[] args) {
    javax.swing.JFrame frame = new javax.swing.JFrame("Regular Expression Tester");
    frame.setDefaultCloseOperation(javax.swing.JFrame.EXIT_ON_CLOSE);
    frame.getContentPane().add("Center", new RegexpExtractorCreatorPanel());
    frame.pack();
    frame.setVisible(true);
  }

}
